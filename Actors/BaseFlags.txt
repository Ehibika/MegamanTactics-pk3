
actor NetCheck_A : Powerup{powerup.duration 7}
actor NetCheck_B : Powerup{powerup.duration 7}
actor NetCheck_C : Powerup{powerup.duration 7}
actor NetCheck_D : Powerup{powerup.duration 7}
actor NetCheck_Freeze : Powerup{powerup.duration 7}
actor NetCheck_DD : Powerup{powerup.duration 3}

actor InMenu : Once{}
actor InRemoteMode : Once{}


actor WeightClass_Light : Once {}
//The absense of the flag is normal weight class
actor WeightClass_Heavy : Once {}

actor WepMessageBuffer : Powerup{powerup.duration -4}
actor WepPickupBuffer : Powerup{powerup.duration 55}

actor ConShotTimer : Powerup {inventory.amount 1 Powerup.Duration 35}
actor AimStagger : Powerup {inventory.amount 1 Powerup.Duration 35}
actor HeatStallTimer : Powerup {inventory.amount 1 Powerup.Duration 35}
actor RefireBuffer : Powerup {inventory.amount 1 Powerup.Duration 5}
actor SemiAutoBuffer : Powerup {inventory.amount 1 Powerup.Duration 5}
actor FiringSpeed : PowerSpeed {inventory.amount 1 Powerup.Duration 7 Speed 0.3 +POWERSPEED.NOTRAIL}
actor GuardSlow : FiringSpeed {}


actor PowerSpeedRunner : PowerSpeed {inventory.amount 1 Powerup.Duration 0x7FFFFFFC Speed 1.2 }


actor UndershirtFlag : Once {}

actor AltCooldownFlag : Once {}
actor AbilityCooldownFlag : Once {}

actor AltChargesCooldownFlag : Once {}
actor AbilityChargesCooldownFlag : Once {}

actor AltCooldownTime : Once {inventory.amount 1 inventory.maxamount 175}
actor AbilityCooldownTime : Once {inventory.amount 1 inventory.maxamount 175}

actor AbilityTimeout : Powerup {inventory.amount 1 Powerup.Duration 70}
actor ShieldClearer : Powerup {inventory.amount 1 Powerup.Duration 17}

actor AbilityAmmo : Ammo
{
inventory.amount 1
inventory.maxamount 1
}


actor Alt_Cooldown : CustomInventory
{
inventory.amount 1
Inventory.MaxAmount 100
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 0
stop
Pickup:
TNT1 A 0 A_JumpIfInventory("AltCooldownTime",1,"Nope")
TNT1 A 0 A_Giveinventory("AltCooldownTime",175)
TNT1 A 0 A_Giveinventory("AltCooldownFlag")
TNT1 A 0 A_Jump(256,"Pickup.Cooler")
Goto Pickup.Cooler

Pickup.Cooler:
TNT1 A 0 A_Spawnitemex("Alt_Cooler")
stop
Nope:
TNT1 A 0
stop
}
}

actor Alt_Cooler : WatcherBase 
{
args 2
States
{
Spawn:
TNT1 A 0
Goto Spawn.Cool

Spawn.Cool:
TNT1 A 0 A_JumpIfInTargetInventory("isDead",1,"DeathTake")
TNT1 A 1 A_SetTics(args[0])
TNT1 A 0 A_TakeFromTarget("AltCooldownTime",10)
TNT1 A 0 A_JumpIfInTargetInventory("AltCooldownTime",1,"Spawn.Cool")
Death:
DeathTake:
TNT1 A 0 A_TakeFromTarget("AltCooldownFlag",99)
TNT1 A 0
stop
}
}

actor Ability_Cooldown : CustomInventory
{
inventory.amount 1
Inventory.MaxAmount 100
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 0
stop
Pickup:
TNT1 A 0 A_JumpIfInventory("AbilityCooldownTime",1,"Nope")
TNT1 A 0 A_Giveinventory("AbilityCooldownTime",175)
TNT1 A 0 A_Giveinventory("AbilityCooldownFlag")
TNT1 A 0 A_Jump(256,"Pickup.Cooler")
Goto Pickup.Cooler

Pickup.Cooler:
TNT1 A 0 A_Spawnitemex("Ability_Cooler")
stop
Nope:
TNT1 A 0
stop
}
}

actor Ability_Cooler : WatcherBase 
{
args 2
States
{
Spawn:
TNT1 A 0
Goto Spawn.Cool

Spawn.Cool:
TNT1 A 0 A_JumpIfInTargetInventory("isDead",1,"DeathTake")
TNT1 A 1 A_SetTics(args[0])
TNT1 A 0 A_TakeFromTarget("AbilityCooldownTime",10)
TNT1 A 0 A_JumpIfInTargetInventory("AbilityCooldownTime",1,"Spawn.Cool")
Death:
DeathTake:
TNT1 A 0 A_TakeFromTarget("AbilityCooldownFlag",99)
TNT1 A 0
stop
}
}


actor AbilityResource_1 : Ammo{inventory.amount 1 inventory.maxamount 500}
actor AbilityResource_2 : Ammo{inventory.amount 1 inventory.maxamount 500}
actor AbilityResource_3 : Ammo{inventory.amount 1 inventory.maxamount 500}

actor AbilityCharge_1 : Ammo{inventory.amount 1 inventory.maxamount 5}
actor AbilityCharge_2 : Ammo{inventory.amount 1 inventory.maxamount 5}
actor AbilityCharge_3 : Ammo{inventory.amount 1 inventory.maxamount 5}

actor AbilityChargeCap_1 : Ammo{inventory.amount 1 inventory.maxamount 5}
actor AbilityChargeCap_2 : Ammo{inventory.amount 1 inventory.maxamount 5}
actor AbilityChargeCap_3 : Ammo{inventory.amount 1 inventory.maxamount 5}

actor Ability1_ChargeFlag : Once{}
actor Ability2_ChargeFlag : Once{}
actor Ability3_ChargeFlag : Once{}

actor Ability1_ResourceFlag : Once{}
actor Ability2_ResourceFlag : Once{}
actor Ability3_ResourceFlag : Once{}

actor UltimateCharge : Inventory{inventory.amount 1 inventory.maxamount 10}
actor UltimateChargeCap : Inventory{inventory.amount 1 inventory.maxamount 10}


actor MT_TakeAbilities : CustomInventory
{
states
{
Pickup:
TNT1 A 0 A_TakeInventory("AbilityResource_1",999)
TNT1 A 0 A_TakeInventory("AbilityResource_2",999)
TNT1 A 0 A_TakeInventory("AbilityResource_3",999)
TNT1 A 0 A_TakeInventory("AbilityCharge_1",9)
TNT1 A 0 A_TakeInventory("AbilityCharge_2",9)
TNT1 A 0 A_TakeInventory("AbilityCharge_3",9)
stop
}
}

actor StockAbilities : CustomInventory
{
states
{
Pickup:
TNT1 A 0 ACS_NamedExecuteAlways("StockAbilities",0)
TNT1 A 0 ACS_NamedExecuteAlways("Write_Inventory",0)
stop
}
}

actor STK : StockAbilities{}

actor GiveUltimateCharge : CustomInventory
{
states
{
Pickup:
TNT1 A 0 ACS_NamedExecuteAlways("GiveUltimateCharge",0)
TNT1 A 0 ACS_NamedExecuteAlways("Write_Inventory",0)
stop
}
}

actor StockUltimateCharge : CustomInventory
{
states
{
Pickup:
TNT1 A 0 ACS_NamedExecuteAlways("StockUltimateCharge",0)
TNT1 A 0 ACS_NamedExecuteAlways("Write_Inventory",0)
stop
}
}

actor ULT : StockUltimateCharge{}

actor RoundSignatureGive : CustomInventory
{
states
{
Pickup:
TNT1 A 0 ACS_NamedExecuteAlways("TLMS_RoundSignatureHandler",0)
stop
}
}


actor FundMe : CustomInventory
{
states
{
Pickup:
TNT1 A 0 ACS_NamedExecuteAlways("GiveCash",0,9000)
stop
}
}


actor SignatureKillRecharge : Once{}
actor SignatureKillCount : Inventory{inventory.amount 1 inventory.maxamount 3}
actor SignatureKillCap : Inventory{inventory.amount 1 inventory.maxamount 3}

actor SignatureKillCounter : CustomInventory
{
states
{
Pickup:
TNT1 A 0 A_JumpIfInventory("SignatureKillRecharge",1,"Pickup2")
TNT1 A 0
stop
Pickup2:
TNT1 A 0 A_JumpIf(CallACS("CheckAbilityCap",1) == 1,"Nope")
TNT1 A 0 A_GiveInventory("SignatureKillCount",1)
TNT1 A 0 A_JumpIf(CallACS("CheckAbilityKillQuota",1) == 1,"Recharge")
stop
Recharge:
TNT1 A 0 A_JumpIf(CallACS("CheckAbilityCap",1) == 1,"Nope")
TNT1 A 0 A_GiveInventory("AbilityCharge_1",1)
TNT1 A 0 A_TakeInventory("SignatureKillCount",9)
stop

Nope:
TNT1 A 0
stop
}
}

actor SignatureTimer : Inventory
{inventory.amount 1 inventory.maxamount 60}

actor SignatureRecharging : Once{}
actor SigRoundEndCue : Powerup{inventory.amount 1 powerup.duration 35}


actor SignatureRecharger : BasicHelper 
{
//Arguments
// 1 = Time before Recharge
// 2 = 0 will only give 1 charge, 1 will continue till at max charges
Args 30,0
Var int user_Ticks;
States
{
Spawn: //Initiate Recharge
TNT1 A 0
TNT1 A 0 A_GiveToTarget("SignatureTimer",args[0])
TNT1 A 1 A_GiveToTarget("SignatureRecharging",1)
Goto Spawn.TimeDown

Spawn.Reinitialize: //ReInitiate Recharge
TNT1 A 1 A_GiveToTarget("SignatureTimer",args[0])
Goto Spawn.TimeDown

Spawn.TimeDown:
TNT1 A 0 A_JumpIfInTargetInventory("IsDead",1,"Death")
TNT1 A 0 A_JumpIfInTargetInventory("CutterFlag",999,"Death")
TNT1 A 0 A_JumpIfInTargetInventory("SigRoundEndCue",1,"Death")
TNT1 A 1 A_SetUserVar("user_Ticks",user_Ticks+1)
TNT1 A 0 A_JumpIf(user_Ticks >=35,"Spawn.TickDown")
loop

Spawn.TickDown:
TNT1 A 0 A_TakeFromTarget("SignatureTimer",1)
TNT1 A 0 A_SetUserVar("user_Ticks",0)
TNT1 A 0 A_JumpIf(CallACS("CheckAbilityCap",1) == 1,"Death") // Just in case
TNT1 A 0 A_JumpIfInTargetInventory("SignatureTimer",1,"Spawn.TimeDown")
Goto Spawn.Recharge

Spawn.Recharge:
TNT1 A 1 A_GiveToTarget("AbilityCharge_1",1)
TNT1 A 0 A_JumpIf(args[1] >=1,"Spawn.Recharge2")
goto Death

Spawn.Recharge2:
TNT1 A 0 A_JumpIf(CallACS("CheckAbilityCap",1) == 1,"Death")
Goto Spawn

Death:
TNT1 A 0 A_TakeFromTarget("SignatureRecharging",9)
TNT1 A 0 A_TakeFromTarget("SignatureTimer",99)
TNT1 A 1 
stop
}
}

actor SignatureFullRecharger : SignatureRecharger {Args 30,1}

actor SignatureRecharge : CustomInventory
{
states
{
pickup:
TNT1 A 0 A_JumpIfInventory("AbilityCharge_1",1,"Nope")
TNT1 A 0 A_JumpIfInventory("SignatureRecharging",1,"Nope")
TNT1 A 0 A_SpawnItemEX("SignatureRecharger")
stop

Nope:
TNT1 A 0
stop
}
}

actor SignatureFullRecharge : CustomInventory
{
states
{
pickup:
TNT1 A 0 A_JumpIfInventory("SignatureRecharging",1,"Nope")
TNT1 A 0 A_SpawnItemEX("SignatureFullRecharger")
stop

Nope:
TNT1 A 0
stop
}
}

actor SignatureRecharger_25 : SignatureRecharger {Args 25,0}

actor SignatureRecharge_25 : SignatureRecharge
{
states
{
pickup:
TNT1 A 0 A_JumpIfInventory("AbilityCharge_1",1,"Nope")
TNT1 A 0 A_JumpIfInventory("SignatureRecharging",1,"Nope")
TNT1 A 0 A_SpawnItemEX("SignatureRecharger_25")
stop
}
}

actor SignatureRecharger_20 : SignatureRecharger {Args 20,0}

actor SignatureRecharge_20 : SignatureRecharge
{
states
{
pickup:
TNT1 A 0 A_JumpIfInventory("AbilityCharge_1",1,"Nope")
TNT1 A 0 A_JumpIfInventory("SignatureRecharging",1,"Nope")
TNT1 A 0 A_SpawnItemEX("SignatureRecharger_20")
stop
}
}

actor SignatureRecharger_15 : SignatureRecharger {Args 15,0}

actor SignatureRecharge_15 : SignatureRecharge
{
states
{
pickup:
TNT1 A 0 A_JumpIfInventory("AbilityCharge_1",1,"Nope")
TNT1 A 0 A_JumpIfInventory("SignatureRecharging",1,"Nope")
TNT1 A 0 A_SpawnItemEX("SignatureRecharger_15")
stop
}
}

actor SignatureRecharger_35 : SignatureRecharger {Args 35,0}

actor SignatureRecharge_35 : SignatureRecharge
{
states
{
pickup:
TNT1 A 0 A_JumpIfInventory("AbilityCharge_1",1,"Nope")
TNT1 A 0 A_JumpIfInventory("SignatureRecharging",1,"Nope")
TNT1 A 0 A_SpawnItemEX("SignatureRecharger_35")
stop
}
}

actor SignatureRecharger_40 : SignatureRecharger {Args 40,0}

actor SignatureRecharge_40 : SignatureRecharge
{
states
{
pickup:
TNT1 A 0 A_JumpIfInventory("AbilityCharge_1",1,"Nope")
TNT1 A 0 A_JumpIfInventory("SignatureRecharging",1,"Nope")
TNT1 A 0 A_SpawnItemEX("SignatureRecharger_40")
stop
}
}

actor SignatureRecharger_45 : SignatureRecharger {Args 45,0}

actor SignatureRecharge_45 : SignatureRecharge
{
states
{
pickup:
TNT1 A 0 A_JumpIfInventory("AbilityCharge_1",1,"Nope")
TNT1 A 0 A_JumpIfInventory("SignatureRecharging",1,"Nope")
TNT1 A 0 A_SpawnItemEX("SignatureRecharger_45")
stop
}
}

actor CannotJump : Once {}




actor WeaponReloader : CustomInventory
{
states
{
Pickup:
TNT1 A 0 ACS_NamedExecuteWithResult("WeaponReload",0)
stop
}
}

actor WeaponSingleReloader : CustomInventory
{
states
{
Pickup:
TNT1 A 0 ACS_NamedExecuteWithResult("WeaponReload",1)
stop
}
}
//[+]========================================================================[+]
//-------------------------|Projectile TRanslation Script|---------------------
//[+]========================================================================[+]
actor ProjectileCode : CustomInventory
{
states
{
Pickup:
TNT1 A 0 A_GiveInventory("ProjectileSpawned",1)
Pickup1:
TNT1 A 0 A_JumpIf(CallACS("Check_ProjectileColor_Server"),"Pickup2")
stop
Pickup2:
TNT1 A 0 A_Jumpifintargetinventory("LightTeamFlag",1,"TeamBlue")
TNT1 A 0 A_Jumpifintargetinventory("WilyTeamFlag",1,"TeamRed")
TNT1 A 0 A_Jumpifintargetinventory("CossackTeamFlag",1,"TeamGreen")
TNT1 A 0 A_Jumpifintargetinventory("KingTeamFlag",1,"TeamGold")
stop
TeamBlue:
TeamBlue1:
TNT1 A 0 ACS_NamedExecuteWithResult("Set_Projectile_Translation",0)
stop
TeamRed:
TeamRed1:
TNT1 A 0 ACS_NamedExecuteWithResult("Set_Projectile_Translation",1)
stop
TeamGreen:
TeamGreen1:
TNT1 A 0 ACS_NamedExecuteWithResult("Set_Projectile_Translation",2)
stop
TeamGold:
TeamGold1:
TNT1 A 0 ACS_NamedExecuteWithResult("Set_Projectile_Translation",3)
stop
}
}

actor ProjectileSpawned : Inventory
{
inventory.amount 1
inventory.maxamount 1
}

actor ProjectileDCode : ProjectileCode
{
states
{
Pickup:
TNT1 A 0 A_Jumpifinventory("ProjectileSpawned",1,"PickupNo")
goto Pickup1
PickupNo:
TNT1 A 0
stop
}
}

actor ProjectileCodeNo : CustomInventory
{
states
{
Pickup:
TNT1 A 0
stop
}
}

actor SyncTarget : ProjectileCode
{
states
{
Pickup:
TNT1 A 0
goto Pickup1
TeamBlue:
TeamRed:
TeamGreen:
TeamGold:
TNT1 A 0 ACS_NamedExecuteWithResult("SyncTargetToTID",CallACS("Core_GetTarget"))
stop
}
}

actor ProjectileCodeSyncTarget : ProjectileCode
{
states
{
TeamBlue:
TNT1 A 0 ACS_NamedExecuteWithResult("SyncTargetToTID",CallACS("Core_GetTarget"))
goto TeamBlue1
TeamRed:
TNT1 A 0 ACS_NamedExecuteWithResult("SyncTargetToTID",CallACS("Core_GetTarget"))
goto TeamRed1
TeamGreen:
TNT1 A 0 ACS_NamedExecuteWithResult("SyncTargetToTID",CallACS("Core_GetTarget"))
goto TeamGreen1
TeamGold:
TNT1 A 0 ACS_NamedExecuteWithResult("SyncTargetToTID",CallACS("Core_GetTarget"))
goto TeamGold1
}
}

actor ProjectileFXCode : ProjectileCode {}



actor DashSet_A : CustomInventory 
{
states
{
pickup:
TNT1 A 0 A_Jumpifinventory("StopMark",1,"Nope")
Goto Pickup2

Pickup2:
TNT1 A 0 SetPlayerProperty(0,1,0)
stop

Nope:
TNT1 A 0 
Stop
}
}

actor DashSet_B : CustomInventory 
{
states
{
pickup:
TNT1 A 0 A_Jumpifinventory("StopMark",1,"Nope")
Goto Pickup2

Pickup2:
TNT1 A 0 SetPlayerProperty(0,1,4)
stop

Nope:
TNT1 A 0 
Stop
}
}

actor DashSet_C : CustomInventory 
{
states
{
pickup:
TNT1 A 0 A_Jumpifinventory("StopMark",1,"Nope")
Goto Pickup2

Pickup2:
TNT1 A 0 SetPlayerProperty(0,1,4)
TNT1 A 0 ACS_NamedExecuteAlways("PKMN_JumpToggle",0,0)
stop

Nope:
TNT1 A 0 
Stop
}
}

actor DashSetOff : CustomInventory 
{
states
{
pickup:
TNT1 A 0 A_Jumpifinventory("StopMark",1,"Nope")
TNT1 A 0 SetPlayerProperty(0,0,0)
TNT1 A 0 SetPlayerProperty(0,0,4)
TNT1 A 0 A_Jump(256,"Pickup2")
Goto Pickup2

Pickup2:
TNT1 A 0 A_SpawnItemEX("DashOffSafety")
stop

Nope:
TNT1 A 0 
Stop
}
}

actor DashOffSafety : BasicHelper 
{
States
{
Spawn:
TNT1 A 0
TNT1 A 5 
TNT1 A 0 A_GiveToTarget("DashSetOff2")
stop

Nope:
TNT1 A 0
stop
}
}

actor DashSetOff2 : DashSetOff 
{
states
{
Pickup2:
TNT1 A 0 SetPlayerProperty(0,0,4)
stop
}
}


actor CanWallJumpFlag : Inventory
{
inventory.amount 1
inventory.maxamount 1
}
actor NoJump : Inventory
{
inventory.amount 1
inventory.maxamount 1
}
actor NoWallJump : Inventory
{
inventory.amount 1
inventory.maxamount 1
}
actor WallJump : Inventory
{
inventory.amount 1
inventory.maxamount 1
}

actor WallJumpCount : Inventory
{
inventory.amount 1
inventory.maxamount 30
}


actor UnSolid : Inventory
{
inventory.amount 1
inventory.maxamount 1
}

actor ReSolidifierCheckPickup : CustomInventory
{
states
{
Pickup:
TNT1 A 0 A_SpawnItemEx("ReSolidifierCheck",0,0,0,momx,momy,momz,0,8,0)
stop
}
}

actor StopBeingUnSolidNoob : CustomInventory
{
states
{
Pickup:
TNT1 A 0 DamageThing(1,15)
stop
}
}

actor ReSolidifierCheck
{
PROJECTILE
+DONTSPLASH
+SKYEXPLODE
+DONTBLAST
+DONTREFLECT
+THRUGHOST
Damage (0)
radius 24
height 84
States
{
Spawn:
TNT1 A 0
TNT1 A 1
TNT1 A 0 A_GiveToTarget("ReSolidify",1)
stop
Death:
XDeath:
TNT1 A 0 //A_TakeFromTarget("StaminaFlag",2)
stop
}
}

actor ReSolidify : CustomInventory
{
states
{
Pickup:
TNT1 A 0 A_JumpIfInventory("UnSolid",1,"Pickup2")
stop
Pickup2:
TNT1 A 0 A_ChangeFlag("SOLID",1)
TNT1 A 0 A_TakeInventory("UnSolid",1)
stop
}
}



actor XRayFlag : Inventory
{
inventory.amount 1
inventory.maxamount 1
}

actor XRayMarker
{
Height 0
Radius 0
+NOINTERACTION
+NOCLIP
PROJECTILE
scale 0.625
RenderStyle "Translucent"
//Alpha 0.0625
Alpha 0.0825
+CLIENTSIDEONLY
+FORCEXYBILLBOARD
states
{
Spawn:
DLOK A 0
DLOK A 1
stop
}
}

actor XRayTagFlag : Powerup {inventory.amount 1 Powerup.Duration 35}

actor XRayTagItem : PowerupGiver
{
+INVENTORY.AUTOACTIVATE
Powerup.Duration -6
powerup.type "XRayTagFlag"
}

actor FootStepPickup : CustomInventory
{
states
{
Pickup:
TNT1 A 0 A_SpawnItemEX("FootStepSounder")
stop
}
}

actor FootStepSounder : BasicHelper 
{
+CLIENTSIDEONLY
Reactiontime 10
States
{
Spawn:
TNT1 A 0
TNT1 A 1 //A_JumpIf(ACS_NamedExecuteWithResult("MT_istargetclient")==1,"Death")
TNT1 A 0 A_JumpIfInTargetInventory("HushStep",1,"Death")
TNT1 A 0 //A_JumpIfInTargetInventory("IsCentaurman",1,"Spawn.HorseStep")

TNT1 A 0 A_JumpIfInTargetInventory("WeightClass_Heavy",1,"Spawn.HeavyStep")
TNT1 A 0 A_JumpIfInTargetInventory("WeightClass_Light",1,"Spawn.LightStep")

TNT1 A 35 A_PlaySoundEx("weapon/footstep","Voice")
stop

Spawn.HorseStep:
TNT1 A 35 A_PlaySoundEx("weapon/centaurwalk","Voice")
stop

Spawn.HeavyStep:
TNT1 A 35 A_PlaySoundEx("weapon/footstep2","Voice")
stop

Spawn.LightStep:
TNT1 A 35 A_PlaySoundEx("weapon/footstep3","Voice")
stop

Death:
TNT1 A 0
stop
}
}

actor HushStep : Powerup{inventory.amount 1 powerup.duration 35}

actor RemoteMoveLock : CustomInventory 
{
states
{
pickup:
TNT1 A 0 ACS_NamedExecuteAlways("core_stopplayer",0,0,1) //
stop

Nope:
TNT1 A 0 
Stop
}
}

actor RemoteMoveUnLock : CustomInventory 
{
states
{
pickup:
TNT1 A 0 ACS_NamedExecuteAlways("core_stopplayer",0,0,0)
TNT1 A 0 //ACS_NamedExecuteAlways("CSLT_JumpToggle",0,1)
TNT1 A 0 A_Jump(256,"Pickup2")
Goto Pickup2

Pickup2:
TNT1 A 0 //A_SpawnItemEX("DashOffSafety")
stop

Nope:
TNT1 A 0 
Stop
}
}

actor RemoteKiller : Powerup {inventory.amount 1 Powerup.Duration 5}
actor RemoteTriggerCooldown : Powerup {inventory.amount 1 Powerup.Duration -5}
actor RCFlag : Powerup {inventory.amount 1 Powerup.Duration 35}


actor DeclineSoundCue : CustomInventory
{
inventory.amount 1
Inventory.MaxAmount 100
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 0
stop
Pickup:
TNT1 A 1 ACS_Execute(979,0)
stop
}
}




actor WepRecoil : CustomInventory 
{
states
{
pickup:
TNT1 A 0 A_Jumpifinventory("RecoilTimer",1,"Pickup2")
TNT1 A 0 A_SpawnItemEX("RecoilHandler")
Goto Pickup2

Pickup2:
TNT1 A 0 A_GiveInventory("RecoilTimer")
TNT1 A 0 A_GiveInventory("ShotCount")
stop

Nope:
TNT1 A 0 
Stop
}
}

actor ShotCount : Inventory
{
inventory.amount 1
inventory.maxamount 100
}
actor RecoilTimer : Powerup{inventory.amount 1 powerup.duration 17}



actor RecoilHandler : BasicHelper 
{
Args 0
States
{
Spawn:
TNT1 A 0 
Spawn.Loop:
TNT1 A 0 A_JumpIfInTargetInventory("CutterFlag",999,"DeathTake")
TNT1 A 0 A_JumpIfInTargetInventory("IsDead",1,"DeathTake")
TNT1 A 1 
TNT1 A 1 A_JumpIfInTargetInventory("RecoilTimer",1,"Spawn.Loop")
Goto Spawn.Take

Spawn.Take:
TNT1 A 0 A_TakeFromTarget("ShotCount",1)
TNT1 A 1 A_JumpIfInTargetInventory("ShotCount",1,"Spawn.Loop")
Death:
DeathTake:
TNT1 A 0 A_TakeFromTarget("ShotCount",99)
TNT1 A 0 A_TakeFromTarget("RecoilRecover",99)
TNT1 A 0 A_GiveToTarget("RecoilRecover_SwayReset",1)
TNT1 A 0
stop
}
}